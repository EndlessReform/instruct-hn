openapi: 3.0.1
info:
  title: Hacker News API for ChatGPT
  version: '0.1'
  description: Query, analyze, and summarize insights from the Hacker News community.
  contact:
    url: https://hn.kix.in/
    email: anant@kix.in
  license:
    name: MIT License
    url: https://opensource.org/license/mit/
paths:
  "/search":
    get:
      summary: Performs a semantic search on story title, text, and comments and returns matching stories with their comments.
      operationId: search
      parameters:
      - required: true
        schema:
          type: string
        name: query
        in: query
        description: Query string to search for.
      - required: false
        schema:
          type: integer
          default: 1
        name: limit
        in: query
        description: Limit the number of results returned (default 1, max 3).
      - required: false
        schema:
          type: boolean
          default: false
        name: exclude_comments
        in: query
        description: Returns results without comment data. If this is set to true, max limit is increased to 20.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Response"
  "/story":
    get:
      summary: Retrieve a story along with all its comments.
      operationId: get_story
      parameters:
      - required: false
        schema:
          type: integer
          default: 1
        name: id
        in: query
        description: ID of the story you want to retrieve.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Response"
  "/stories":
    get:
      summary: Search for stories matching a variety of criteria. Stories are sorted by their score (upvotes) by default.
      operationId: get_stories
      parameters:
      - required: false
        schema:
          type: string
        name: by
        in: query
        description: Find stories submitted by this user.
      - required: false
        schema:
          type: integer
        name: before_time
        in: query
        description: Find stories submitted at or before this UNIX time.
      - required: false
        schema:
          type: integer
        name: after_time
        in: query
        description: Find stories submitted at or after this UNIX time. Defaults to last day.
      - required: false
        schema:
          type: integer
        name: min_score
        in: query
        description: Find stories with a score at or above this number.
      - required: false
        schema:
          type: integer
        name: max_score
        in: query
        description: Find stories with a score at or below this number.
      - required: false
        schema:
          type: integer
        name: min_comments
        in: query
        description: Find stories with number of comments (descendants) equal to or above this number.
      - required: false
        schema:
          type: integer
        name: max_comments
        in: query
        description: Find stories with number of comments (descendants) equal to or below this number.
      - required: false
        schema:
          type: string
          enum:
            - score
            - time
            - descendants
        name: sort_by
        in: query
        description: Sort results by score (upvotes, default), descendants (number of comments), time (of submission).
      - required: false
        schema:
          type: string
          enum:
            - asc
            - desc
        name: sort_order
        in: query
        description: Sort results in descending (default) or ascending order of the sort_by parameter.
      - required: false
        schema:
          type: integer
          default: 0
        name: skip
        in: query
        description: Offset the results returned, use to page through multiple results.
      - required: false
        schema:
          type: integer
          default: 50
        name: limit
        in: query
        description: Limit the number of results returned (default 10, max 50).
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Response"
  "/comment":
    get:
      summary: Retrieve a comment along with all its replies.
      operationId: get_comment
      parameters:
      - required: false
        schema:
          type: integer
          default: 1
        name: id
        in: query
        description: ID of the comment you want to retrieve.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Response"
  "/comments":
    get:
      summary: Find comments matching a variety of criteria. Comments are sorted by the most recent ones by default.
      operationId: get_comments
      parameters:
      - required: false
        schema:
          type: string
        name: by
        in: query
      - required: false
        schema:
          type: integer
        name: before_time
        in: query
      - required: false
        schema:
          type: integer
        name: after_time
        in: query
      - required: false
        schema:
          type: string
          enum:
            - score
            - time
            - descendants
        name: sort_by
        in: query
        description: Sort results by score (upvotes), descendants (number of comments), time (of submission, default).
      - required: false
        schema:
          type: string
          enum:
            - asc
            - desc
        name: sort_order
        in: query
        schema:
          type: integer
          default: 0
        name: skip
        in: query
      - required: false
        schema:
          type: integer
          default: 10
        name: limit
        in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Response"
  "/polls":
    get:
      summary: Find polls matching a variety of criteria. Polls are sorted by their score (upvotes) by default.
      operationId: get_polls
      parameters:
      - required: false
        schema:
          type: string
        name: by
        in: query
      - required: false
        schema:
          type: integer
        name: before_time
        in: query
      - required: false
        schema:
          type: integer
        name: after_time
        in: query
      - required: false
        schema:
          type: string
          enum:
            - score
            - time
            - descendants
        name: sort_by
        in: query
      - required: false
        schema:
          type: string
          enum:
            - asc
            - desc
        name: sort_order
        in: query
      - required: false
        schema:
          type: integer
          default: 0
        name: skip
        in: query
      - required: false
        schema:
          type: integer
          default: 10
        name: limit
        in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Response"
  "/user":
    get:
      summary: Retrieve a user along with all their submissions (story, comment, or poll IDs).
      operationId: get_user
      parameters:
      - required: false
        schema:
          type: string
          default: pg
        name: id
        in: query
        description: ID of the user you want to retrieve.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserResponse"
  "/users":
    get:
      summary: Find users matching a variety of criteria. Users are sorted by their karma (upvotes) by default.
      operationId: get_users
      parameters:
      - required: false
        schema:
          type: array
          items:
            type: string
        name: ids
        in: query
      - required: false
        schema:
          type: integer
        name: before_created
        in: query
      - required: false
        schema:
          type: integer
        name: after_created
        in: query
      - required: false
        schema:
          type: integer
        name: min_karma
        in: query
      - required: false
        schema:
          type: integer
        name: max_karma
        in: query
      - required: false
        schema:
          type: string
          enum:
            - created
            - karma
        name: sort_by
        in: query
        description: Sort results by karma (default), or created (account creation time).
      - required: false
        schema:
          type: string
          enum:
            - asc
            - desc
        name: sort_order
        in: query
      - required: false
        schema:
          type: integer
          default: 0
        name: skip
        in: query
      - required: false
        schema:
          type: integer
          default: 10
        name: limit
        in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/UserResponse"
components:
  schemas:
    Response:
      required:
      - id
      - type
      type: object
      properties:
        id:
          type: integer
        type:
          type: string
        text:
          type: string
        time:
          type: integer
        by:
          type: string
        hn_url:
          type: string
        title:
          type: string
        url:
          type: string
        score:
          type: integer
        descendants:
          type: integer
        kids:
          type: array
          items:
            type: object
        parts:
          type: array
          items:
            type: object
    UserResponse:
      required:
      - id
      - created
      - karma
      type: object
      properties:
        id:
          type: string
        created:
          type: integer
        karma:
          type: integer
        about:
          type: string
        submitted:
          type: array
          items:
            type: integer
        hn_url:
          type: string